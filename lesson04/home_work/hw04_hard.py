__author__ = 'Nekhamchin Anatoly'
# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
print("1:")
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]
print("       matrix(list)  = ", matrix)
#print("rotate_matrix(tuple) = ", tuple(zip(*matrix)))

matrix_rotate = list(map(list, zip(*matrix)))

print("rotate_matrix(list)  = ", list(map(list, zip(*matrix))))
# # Пример транспонирования (поворота) матрицы
# print("rotate_matrix = ", list(map(list, zip(*matrix))))
# # Да, вот так все просто-сложно :-)


# Суть сложности hard: Решите задачу в одну строку

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
print("2:")
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

def mul(string):
    _res = 1
    for _item in string:
        _res *= int(_item)
    return _res


number = number.replace("\n", "")
_maximum = 0
_pos = 0
_index = 0
while _index < len(number):
    _current = mul(number[_index:_index + 5])
    if _current > _maximum:
        _maximum = _current
        _pos = _index
    _index += 1
print("max mul of 5 elements {0} at {1} ({2})".format(_maximum, _pos, number[_pos:_pos+5]))

# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.
print("3:")


def sum_1(row):
    return sum(row) < 2


ok = [[1, 7], [2, 4], [3, 2], [4, 8], [5, 6], [6, 1], [7, 3], [8, 5]]
notok = [(1, 7), (2, 4), (3, 2), (4, 8), (5, 6), (6, 1), (7, 3), (8, 1)]

field = [[0 for _ in range(8)] for _ in range(8)]
try:
    for _i in range(8):
        ok[_i][0], ok[_i][1] = map(int, input("x,y {}:".format(_i)).split(','))
except ValueError:
    print("error value, use predefined:" + str(ok))
    places = ok

for _f in places:
    field[_f[0]-1][_f[1]-1] = 1

for row in field:
    print(row)
res = True
for i in range(8):
    res = res and sum_1(field[i]) and\
          sum_1(tuple(zip(*field))[i]) and\
          sum_1(field[x + i][x] for x in range(8 - i)) and\
          sum_1(field[x][x + i] for x in range(8 - i)) and\
          sum_1((field[x][7 - x - i] for x in range(8 - i))) and\
          sum_1(field[7 - x][x + i] for x in range(8 - i))
if res:
    print("NO")
else:
    print("YES")

